---
title: "26 Iteration"
date: "2025-02-28"
date-modified: "2025-03-05"
format: "html"
execute:
  warning: false
  fig-width: 6
  fig-asp: 0.618
  out-width: 70%
  fig-align: center
---

```{r}
#| echo: false

source("_common.R")
```

# 简介

在tidyverse中有一些常见的循环操作，如：

-   绘制分面——`facet_wrap()`,`facet_grid()`
-   分组总结--`group_by()`,`summarise()`
-   list-column解压——`unnest_wider()`,`unnest_longer()`

下面我们学习另外一些循环技巧。

```{r}
#| message: false

library(tidyverse)
```

# 循环操作数据框中的列

假设现在有一个多列的数据框，你要对某些列进行中位数统计。

```{r}
df <- tibble(
  a = rnorm(10),
  b = rnorm(10),
  c = rnorm(10),
  d = rnorm(10)
)
```

你首先会想到对每一列执行相同的操作，如下。

```{r}
df |> summarize(
  n = n(),
  a = median(a),
  b = median(b),
  c = median(c),
  d = median(d),
)
```

如果再增加很多列呢，上述的写法会及其冗长，`dplyr`提供了`across`函数，能更加方便地实现目的。

```{r}
df |> summarize(
  n = n(),
  across(a:d, median),
)
```

下面介绍`across()`的三个主要参数：`.cols`、`.fns`和`.names`。

## 选择列

`.cols`控制选择哪几列，是一个`tidy-select`类，类似于`dplyr`中的`select()`，可以使用适配`select()`的函数，如`starts_with()`、`contains()`等。

更多有过关于`tidy-select`的内容，可以参考`?dplyr_tidy_select`。

```{r}
df <- tibble(
  grp = sample(2, 10, replace = TRUE),
  a = rnorm(10),
  b = rnorm(10),
  c = rnorm(10),
  d = rnorm(10)
)

df |>
  group_by(grp) |>
  summarize(across(everything(), median))
```

## 函数

`.fns`参数提供`across()`进行call的函数，可以是
  -   函数名，例如`mean`，注意此处函数后不能有`()`
  -   purrr-style lambda，例如`~mean(.x, na.rm = TRUE)`
  -   上述两种函数组成的**named list**，例如`list(mean = mean,n_miss = ~ sum(is.na(.x))`

```{r filename="函数名"}
#| error: true

# 函数名后有`()`会报错。
df |>
  group_by(grp) |>
  summarize(across(everything(), median()))
```

```{r filename="purrr-style lambda"}
rnorm_na <- function(n, n_na, mean = 0, sd = 1) {
  sample(c(rnorm(n - n_na, mean = mean, sd = sd), rep(NA, n_na)))
}

df_miss <- tibble(
  a = rnorm_na(5, 1),
  b = rnorm_na(5, 1),
  c = rnorm_na(5, 2),
  d = rnorm(5)
)

df_miss |>
  summarize(
    across(a:d, ~ median(., na.rm = TRUE)),
    n = n()
  )

df_miss |>
  summarize(
    across(a:d, function(x) median(x, na.rm = TRUE)),
    n = n()
  )

df_miss |>
  summarize(
    across(a:d, \(x) median(x, na.rm = TRUE)),
    n = n()
  )
```

```{r filename="函数list"}
df_miss |>
  summarize(
    across(a:d, list(
      median = \(x) median(x, na.rm = TRUE),
      n_miss = \(x) sum(is.na(x))
    )),
    n = n()
  )
```

## 列名

如果你仔细观察，上面例子中的列名类似于`{.col}_{.fn}`（这也是为什么函数list是要有name属性的原因）。

`.names`参数控制列名定义规则，使用`{.col}`表示原始列名，`{.fn}`表示函数名；单个函数默认`{.col}`，多个函数默认`{.col}_{.fn}`。

`across()`在与`mutate()`联用时会将原来的列覆盖，因为`.names()`默认是`{.col}`，所以看不出来，当参数值改变后就会直观的体现出来：

```{r filename="与mutate联用"}
df_miss |>
  mutate(
    across(a:d, \(x) coalesce(x, 0), .names = "{.col}_na_zero")
  )
```

## filter()中的循环

dplyr 提供了两个`across()`的变体:

-   `if_any()`：至少有一个条件返回`TRUE`
-   `if_all()`：所有条件返回`TRUE`

```{r}
# same as df_miss |> filter(is.na(a) | is.na(b) | is.na(c) | is.na(d))
df_miss |> filter(if_any(a:d, is.na))

# same as df_miss |> filter(is.na(a) & is.na(b) & is.na(c) & is.na(d))
df_miss |> filter(if_all(a:d, is.na))
```

## 与`piovt_longer()`对比

使用`piovt_longer()`可以实现`across()`，反之则不成立。例如下面的两个例子

```{r filename="across"}
df |>
  summarize(across(a:d, list(median = median, mean = mean)))
```

```{r filename="pivot_longer 复现"}
long <- df |>
  pivot_longer(a:d) |>
  group_by(name) |>
  summarize(
    median = median(value),
    mean = mean(value)
  )
long |>
  pivot_wider(
    names_from = name,
    values_from = c(median, mean),
    names_vary = "slowest",
    names_glue = "{name}_{.value}"
  )
```

```{r filename="只能使用pivot_longer"}
df_paired <- tibble(
  a_val = rnorm(10),
  a_wts = runif(10),
  b_val = rnorm(10),
  b_wts = runif(10),
  c_val = rnorm(10),
  c_wts = runif(10),
  d_val = rnorm(10),
  d_wts = runif(10)
)

df_long <- df_paired |>
  pivot_longer(
    everything(),
    names_to = c("group", ".value"),
    names_sep = "_"
  )
df_long

df_long |>
  group_by(group) |>
  summarize(mean = weighted.mean(val, wts))
```

# purrr::map() 类函数

原文中有关`map()`的内容是一个循环读取文件的例子，由于实际工作中，循环读取文件的操作极少见，所以不再这里赘述，可以参考原文中的例子，主要使用了`purrr::map()`和`purrr::list_rbind()`。

`map()`函数循环对一个list或原子向量进行操作，生成一个与输入等长的对象；如果输入有name属性，那么输出也会保留name属性。

函数有两个重要的参数：

-   `.x`：原子向量或list
-   `.f`：
    -   普通函数，例如`mean`。
    -   purrr-style lambda，例如`~mean(.x, na.rm = TRUE)`。
    -   匿名函数，例如`⁠\(x) x + 1`⁠或`function(x) x + 1.`。
    -   字符串、正数或者list，例如`"idx"`,`1`或`list("idx", 1)`；其作用是类似于`purrr::pluck()`，提取`x`的`idx`或`x[[1]]`；当提取的元素为`NULL`时，可以配置`.default`。

当使用管道符时，`.x`通常是管道前的结果。

```{r}
# 普通函数
1:5 |>
  map(rnorm, n = 5)

# 匿名函数
1:5 |>
  map(\(x) rnorm(5, x))

# 定位函数
l2 <- list(
  "name1" = list(num = 1:3, letters[1:3]),
  "name2" = list(num = 101:103, letters[4:6]),
  "name3" = list()
)
l2 |> map(c(2, 2), .default = "none")
```

`map()`函数有很多变体，我将其归为下面三大类。

## 返回结果不同

`map()`函数会返回一个list，其变体则不同。

### 返回输入值

`walk()`函数只能隐性返回输入，对`.f`生成的结果没有处理，这在循环绘图中十分便利。

```{r}
#| layout-ncol: 2

res <- 1:4 |>
  walk(\(x) {
    hist(rnorm(100, x))
  })

res
```

### 返回结果结构与输入相同

`modify()`函数会输出一个与输入结构完全相同的结果，常用来修改元素类型。

```{r}
# Convert to characters
iris |> str()
iris |>
  modify(as.character) |>
  str()
```

其还有变体`modify_if()`，`modify_at()`，`modify2()`，`imodify()`，使用方法相似，具体差异同下面讲到的一样。

### 返回原子向量

这一类有`map_lgl()`,`map_int()`,`map_dbl()`,`map_chr()`,`map_vec()`；要求返回的原子向量类型为函数名后缀规定的类型，否则报错。例如：`map_lgl()`函数要求返回结果为由`TRUE`和`FALSE`构成的向量，否则报错。`map_vec()`函数提供了参数`.ptype`，可以指定返回结果的类型。

```{r}
#| error: true

numbers <- list(1, 2, 3, 4)

map_lgl(numbers, ~ .x %% 2 == 0)

map_lgl(numbers, ~ .x * 2)
```

### 返回数据框

这一类有`map_dfc()`,`map_dfr()`，这两类函数在官方文档中已经不再推荐使用，而是使用`map()` + `list_rbind()`/`list_cbind()`的组合方式。

```{r}
# map ---------------------------------------------
# Was:
mtcars |>
  split(mtcars$cyl) |>
  map(\(df) lm(mpg ~ wt, data = df)) |>
  map_dfr(\(mod) as.data.frame(t(as.matrix(coef(mod)))))
# Now:
mtcars |>
  split(mtcars$cyl) |>
  map(\(df) lm(mpg ~ wt, data = df)) |>
  map(\(mod) as.data.frame(t(as.matrix(coef(mod))))) |>
  list_rbind()
```

## 输入元素不同

这一类有：

-   对不同位置元素操作：`map_at()`,`map_if()`,`map_depth()`。
-   要求元素类型为长度是1的list：`lmap()`和其变体`lmap_at()`,`lmap_if()`。

### map_at()

通过参数`.at`，提供元素在输入中的位置或name属性，针对特定元素进行操作。

```{r}
l3 <- list(
  a = 1:3,
  b = LETTERS[1:3],
  c = 7:9
)

l3 |>
  map_at(.at = c("a", "c"), ~ .x + 1)
```

### map_if()

通过参数`.p`，提供元素要满足的条件，针对特定元素进行操作，可以是判断函数，也可以是逻辑向量。

```{r}
l3 |>
  map_if(.p = is.numeric, ~ .x + 1)
```

### map_depth()

通过参数`.depth`，提供元素的深度，针对该深度处的元素进行操作。

```{r}
x <- list(a = list(foo = 1:2, bar = 3:4), b = list(baz = 5:6))
x |> str()

x |>
  map_depth(2, \(y) paste(y, collapse = "/")) |>
  str()

# Equivalent to:
x |>
  map(\(y) map(y, \(z) paste(z, collapse = "/"))) |>
  str()
```

### lmap() 类

`lmap()`与`map()`的不同之处在于，后者提取使用`[[i]]`来提取list中的元素，返回一个向量，前者使用`[i]`提取list中的元素，返回一个list。

由于`lmap()`操作对象是list，所以它可以使用list中的name属性；在返回结果时，它会使用`c()`将list合并。下面是一个示例：

```{r}
add_minus <- function(x) {
  res1 <- lapply(x, function(y) y - 1)
  names(res1) <- paste0(names(x), "_minus")
  res2 <- lapply(x, function(y) y + 1)
  names(res2) <- paste0(names(x), "_plus")
  c(res1, res2)
}

# The output size varies each time we map f()
test <- list(a = 1:4, c = 8:9)
test |>
  lmap(add_minus) |>
  str()
```

所以，`lmap()`对参数`.x`，`.f`有不同的要求：

-   `.x`：list 或 data.frame
-   `.f`：该函数输入为长度是1的list，输出是任意长度的list。

## 函数参数数目

这一类函数有`map2()`、`pmap()`和`map2()`的变体`imap()`。这些函数与`map()`的使用方法类似，只是多提供了一组或多组`.f`函数的参数。同时这些函数都有`*_lgl()`,`*_int()`, `*_dbl()`, `*_chr()`, `*_vec()`, `*_dfc()`, `*_dfr()`,`*walk()`等变体，使用方法同上。

### imap()

`imap()`是`map2(x, names(x), ...)`或`map2(x, seq_along(x), ...)`的简写，其余使用方法相同。

```{r}
set.seed(123)
imap_chr(sample(10), paste)
```
