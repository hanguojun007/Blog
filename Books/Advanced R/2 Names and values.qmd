---
title: "2 Names and values"
date: "2025-03-24"
date-modified: "2025-03-28"
format: "html"
execute:
  warning: false
  fig-width: 6
  fig-asp: 0.618
  out-width: 70%
  fig-align: center
---

```{r}
#| echo: false

source("_common.R")
```

## Introduction

厘清`object`和其`name`的区别十分重要，这可以帮助你：

-   精准地判断代码对内存的消耗。
-   理解代码运行缓慢的原因并优化。
-   更好理解R的函数式编程。

::: {.callout-tip}
创建一个对象，你不需要使用`<-`来绑定一个名字。`1:10`能创建一个，`x <- 1:10`也能创建一个。
:::

### Outline

-   2.2节：介绍对象和其name的不同。
-   2.3节：copy-on-modify模式，使用`tracemem()`追踪对象内存地址变化。
-   2.4节：R 对象消耗的内存，使用`lobstr::obj_size()`查看占用大小。
-   2.5节：copy-on-modify模式的两个例外，环境对象和只有一个name的对象。
-   2.6节：使用`gc()`释放内存。

### Prerequisites

```{r}
library(lobstr)
```

### Sources

本章节的很多内容来自于下面3处：

-   R documentation: `?Memory`, `?gc`.
-   memory profiling in [Writing R extensions](https://cran.r-project.org/doc/manuals/R-exts.html).
-   SEXPs in [R internals](https://cran.r-project.org/doc/manuals/R-ints.html)

## Binding basics

考虑下面的代码：

```{r}
x <- c(1, 2, 3)
y <- x
```

我们创建了一个名为`x`，值为`1,2,3`的对象，然后复制了一份讲其命名为`y`。那么，R在内存中是否也复制了一份，也即消耗了2倍的内存呢？事实上，此时消耗的内存并不是两倍，实际情况如下图所示。

![](images/binding-2.png)

解释一下：

-   `c(1,2,3)`创建了对象，并占用内存，地址为`0x74b`。
-   `<-` 为对象绑定一个名字，即`x`。
-   `y <- x`虽然将`x`复制了一份，但是`x`和`y`的值相同，都是对象`c(1,2,3)`，所以内存地址是不变。

也即是说：内存和`<-`后面的对象有关系，后面的不变，内存地址不变，内存消耗几乎不变；`<-`前面的只是对象绑定的名字，因为实际的内存地址会随着终端变动而发生变动，需要绑定一个标签，你在代码的其他地方可以调用。

查看对象的地址可以使用`lobstr::obj_addr()`，当你运行时，结果肯定与我的结果不同，因为终端发生了变动。

```{r}
obj_addr(x)
obj_addr(y)
```

请注意：上述说的“`x`和`y`的值相同”，与“创建值相同的两个对象”不同。

```{r}
a <- c(1, 2, 3)
b <- c(1, 2, 3)
obj_addr(a)
obj_addr(b)
```

### Non-syntactic names

R 中对变量名的要求：必须由字母、数字、`.`、`_`构成，但`_`、数字、`.`+数字不能位于开头；不能使用关键字，查看关键字`?Reserved`；使用`` ` `` 可以将任意字符包裹起来当作变量名；不建议使用`'`或`"`将变量名包裹。

```{r}
#| error: true
_abc <- 1

if <- 10

`_abc` <- 1
`_abc`

`if` <- 10
`if`
```

### Exercises

-   下面所指的`mean`函数内存地址都相同。
```{r}
obj_addr(mean)
obj_addr(base::mean)
obj_addr(get("mean"))
obj_addr(evalq(mean))
obj_addr(match.fun("mean"))
```

-   `utils::read.csv()`添加参数`check.names = FALSE`可以抑制列名的强制转换。

-   `make.names()`在将非法名转换为合法名时，会遵循下面的规则：
    -   必要时添加前缀`X`。
    -   非法字符转换为`.`。
    -   缺失值转换为`NA`。
    -   R中的关键字后添加`.`。

## Copy-on-modify

诚如上述，当对象相同时，没有发生内存的消耗；但是如果对`y`进行了值得修改，那么内存会发生变动，如下所示。

```{r}
y[[3]] <- 4
x
y
obj_addr(x)
obj_addr(y)
```

`x`绑定得原对象值未改变，R 创建新的对象，重新与`y`进行绑定。

![](images/binding-3.png)

如果你修改多次对象，R 会创建多个新的对象，然后重新绑定，但是旧的对象不会消失，仍然存在于内存中，如下所示。

```{r}
y[[3]] <- 5
obj_addr(y)
```

::: {.callout-note}
请注意：在Rstudio中进行上述内存地址检查时，会有所不同。
:::

### `tracemem()`

`tracemem()`可以跟踪对象，在对象发生变动时显示变动情况，如下所示。

```{r}
cat(tracemem(x), "\n")

y <- x
y[[3]] <- 4L
y[[3]] <- 5L
```

使用`untracemem()`可以停止跟踪，如下所示。

```{r}
untracemem(y)
y[[3]] <- 6L
```

### Function calls

函数生成对象时遵循相同的规则，如下所示。

```{r}
f <- function(a) {
  a
}

cat(tracemem(x), "\n")

z <- f(x)
# there's no copy here!

untracemem(x)
```

![](images/binding-f1.png)

解释一下：

-   黄色部分表示函数，有参数`a`。
-   灰色部分表示执行环境，返回函数运行后的结果`a`。
-   因为返回结果和`x`一致，没有改变对象，所以仍然绑定相同的对象。
-   当函数返回结果与`x`不一致时，会创建新的对象，重新绑定。

### Lists

与上面的向量不同，list格式的对象不仅本身有内存地址指定，它的元素也有内存地址指定。

下面是一个简单的list对象，虽然看似简单，但是在内存分配上却不简单。

```{r}
l1 <- list(1, 2, 3)
```

![](images/list.png)

当复制list对象时，同样内存不会发生改变：

```{r}
l2 <- l1
```

![](images/l-modify-1.png)

当复制的对象`l2`发生元素变动时，虽然R会创建一个新的内存地址，但同上面的情况略有不同：对list的复制是浅复制，不会复制所有的元素。与浅复制相对的是深复制，在R 3.1.0之前，都是深复制。

```{r}
l2[[3]] <- 4
```

![](images/l-modify-2.png)

使用`lobstr::ref()`可以查看list中每个元素的内存地址。注意对一个list单独使用，和对两个list同时使用的结果中前面的数字有不同（自己尝试一下）。

```{r}
ref(l1, l2)
```

关于list中的内存指向，你可以试着嵌套一些复杂的list，然后观察内存分配情况。

### Data frames

data.frame 其本质就是list，所以它的行为同list一样。

```{r}
d1 <- data.frame(x = c(1, 5, 6), y = c(2, 4, 3))
d2 <- d1
d2[, 2] <- d2[, 2] * 2
d3 <- d1
d3[1, ] <- d3[1, ] * 3

ref(d1, d2, d3)
```

### Character vectors

对于字符串类型的向量，R 使用全局字符串池来储存字符串。

```{r}
x <- c("a", "a", "abc", "d")
y <- c("a", "d")
z <- list("a", "a", "abc", "d")
ref(x, character = TRUE)
ref(y, character = TRUE)
ref(z, character = TRUE)
```

![](images/character-2.png)

### Exercises

-   `1:10`在内存中创建了对象，但是没有绑定，R无法对没有name的对象进行操作。

-   `x`最先是`integer`类型，`x[[3]] <- 4` 使用了`double`类型的数据替换，会导致R先复制一份`double`类型的向量，然后再替换数据。数据类型见下一章。

## Object size

使用`lobstr::obj_size()`可以查看对象的大小。

```{r}
obj_size(letters)
obj_size(ggplot2::diamonds)
```

list对象，因为有上述的浅复制机制，实际大小会与想象的不同。

```{r}
x <- runif(1e6)
obj_size(x)

y <- list(x, x, x)
obj_size(y)
```

上述对象中，`y`比`x`要略大一些，大约`80b`，因为包含了三份空元素的list大小是`80b`。

```{r}
obj_size(list(NULL, NULL, NULL))
```

字符串向量也有相同的现象。

```{r}
banana <- "bananas bananas bananas"
obj_size(banana)
obj_size(rep(banana, 100))
```

### Exercises
...

## Modify-in-place

诚如上述，当复制的对象发生值的改动，R会复制一份新，然后再修改值。但存在两个特例：

-   当对象只绑定了一个name时，会直接修改对象的值。
-   环境变量是一个特殊的对象，它总是直接修改对象的值。

### Objects with a single binding

如下面的例子，`v`只绑定了一个name，追踪内存的变动，可以看到没有变化。
```{r}
a <- c(1, 2, 3)
lobstr::obj_addr(a)
a[[3]] <- 4
lobstr::obj_addr(a)

a[3] <- 5

```

```{r}
# 复制一份对象，a,b的地址是一样的
a <- c(1,2,3)
b <- a
lobstr::obj_addr(a)
lobstr::obj_addr(b)
# 当把名字a绑定另外一个对象后，在修改b的值，b的内存地址会发生变化
a <- c(2,3,4)
b[[3]] <- 4
lobstr::obj_addr(a)
lobstr::obj_addr(b)

```


```{r}
x <- data.frame(matrix(runif(5 * 1e4), ncol = 5))
medians <- vapply(x, median, numeric(1))

for (i in seq_along(medians)) {
  x[[i]] <- x[[i]] - medians[[i]]
}

cat(tracemem(x), "\n")
#> <0x7f80c429e020>

for (i in 1:5) {
  x[[i]] <- x[[i]] - medians[[i]]
}
untracemem(x)
```

```{r}
y <- as.list(x)
cat(tracemem(y), "\n")
#> <0x7f80c5c3de20>

for (i in 1:5) {
  y[[i]] <- y[[i]] - medians[[i]]
}

x <- list()
x[[1]] <- x
ref(x)
```

## Unbinding and the garbage collector



## Quiz answers {#sec-quiz_answer}

1.  使用`` \` `` 。

```{r}
#| eval: false
df <- data.frame(runif(3), runif(3))
names(df) <- c(1, 2)

df$`3` <- df$`1` + df$`2`
```

2.   大约占8MB。

```{r}
x <- runif(1e6)
y <- list(x, x, x)
obj_size(y)
```

3.   `b[[1]] <- 10`。