---
title: "3 Vectors"
date: "2025-03-30"
date-modified: "2025-04-03"
format: "html"
execute:
  warning: false
  fig-width: 6
  fig-asp: 0.618
  out-width: 70%
  fig-align: center
---

```{r}
#| echo: false

source("_common.R")
```

## Introduction

R 中的Vectors可以分为两种：要求所有元素相同的`atomic`、元素可以是任意类型的`list`，还有一个类似零长度向量的`NULL`。下面是三者关系的示意图。

```{mermaid}
graph TD
    A[Atomic] --> B(Vector)
    C[List] --> B(Vector)
    D(NULL)
```

这里提到的vector就是我们常说的向量。在R中，所有的对象都是向量，对向量添加不同属性就构成了不同类型的数据。维度（dimension）和类（clas）是两个比较重要的属性，前者将一维向量升格为二维矩阵甚至多维数组，后者赋予了对象S3面向对象系统。

### Outline

-   3.2节：R中最简单的 atomic 向量：`integer`、`double`、`character`、`logical`。
-   3.3节：向量的三个重要属性：`name`、`dimension`、`class`。
-   3.4节：具有特殊属性的 atomic 向量：`factor`、`date`、`date-time`、`duration`。
-   3.5节：list。
-   3.6节：data.frame 和 tibble。

## Atomic vectors

R 中有四类常见的atomic向量：`integer`、`double`、`character`、`logical`。下面是这四类向量之间的关系图。还有两类不常见的：`complex`和`raw`，前者表示复数，后者表示二级制数据。

```{mermaid}
graph BT
    B[Atomic] --> A(Vector)
    D[Logical] --> B(Atomic)
    C[Numeric] --> B(Atomic)
    E[Integer] --> C(Numeric)
    F[Double] --> C(Numeric)
    G[Character] --> B(Atomic)
    subgraph " "
        D
        E
        F
        G
    end
```

### Scalars

上述四种atomic向量都有各自的语法：

-   `logical`：只能使用`TRUE/T`和`FALSE/F`。
-   `double`：有三种形式：十进制、科学技术法和十六进制；还有三个特殊的符号：`NaN`、`Inf`和`-Inf`。
-   `integer`：形式同`double`，但是必须添加`L`后缀。
-   `character`：使用双引号或单引号包裹，`\`进行转义。

### Making longer vectors with c()

使用`c()`函数可以创建长向量，使用`typeof()`查看对象的类型。

```{r}
lgl_var <- c(TRUE, FALSE)
int_var <- c(1L, 6L, 10L)
dbl_var <- c(1, 2.5, 4.5)
chr_var <- c("these are", "some strings")

typeof(lgl_var)
typeof(int_var)
typeof(dbl_var)
typeof(chr_var)
```

### Missing values

`NA`是`not applicable`的缩写，表示缺失值。缺失值有一定的‘传染性’：许多包含`NA`的计算会返回`NA`。

```{r}
NA > 5
10 * NA
!NA
```

但有一些特例：

```{r}
NA^0
NA | TRUE
NA & FALSE
```

使用`is.na()`判断是否是`NA`，而不是`==`。

```{r}
x <- c(NA, 5, NA, 10)
x == NA
is.na(x)
```

理论上讲：存在四种`NA`类型，分别对应上述的四种atomic向量：`NA`(logical)、`NA_integer_`(integer)、`NA_real_`(double)、`NA_character`(character)。但平常使用无需强调，R会自动强制转换。`NA`默认表示logical是因为下面的强制转换顺序。

### Coercion

如上所述，当atomic向量中的元素类型不一致时，R会自动强制转换类型。转换的顺序次序为：character → double → integer → logical。例如，`c("a", 1)`的结果是`c("a", "1")`。

```{r}
c("a", 1)
```

强制转换的背后是`as.*()`函数，例如`as.logical()`、`as.integer()`、`as.double()`、`as.character()`。转换失败会生成警告信息和缺失值。

```{r}
#| warning: true
as.integer(c("1", "1.5", "a"))
```

### Testing

R 中由类似判断是否是缺失值`is.na()`的其他函数，但是要小心使用。`is.logical()`、`is.integer()`、`is.double()`、`is.character()`这四个函数的用法与`is.na()`相同；`is.vector()`、`is.atomic()`、`is.numeric()`的用法则大不相同。

-   `is.vector()`：根据`mode`参数，判断是否属于atomic向量、list、或expression，同时不能有除name外的其他属性。
-   `is.atomic()`：判断是否属于atomic向量，`NULL`返回`FALSE`。
-   `is.numeric()`：属于`double`、`integer`或任何可视为数值的向量。

具体细节可以查看R文档。

### Exercises

...

## Attributes

### Getting and setting

属性可以看作是由键值对构成，附属于对象的元信息。可以使用`attr()`,`attributes()`,`structure()`来提取或设置对象的属性。

```{r}
# 单独设置
a <- 1:3
attr(a, "x") <- "abcdef"
attr(a, "x")

attr(a, "y") <- 4:6
str(attributes(a))


# 批量设置
a <- structure(
  1:3,
  x = "abcdef",
  y = 4:6
)
str(attributes(a))
```

![](images/attr.png)

属性极易丢失，但有两个例外，通常会保留：`name`,`dim`；保留属性需要使用S3面向对象系统。

```{r}
attributes(a[1])
attributes(sum(a))
```

### Names

有三种为向量设定name属性的方法。去除name属性有两种方法.

```{r}
# When creating it:
x <- c(a = 1, b = 2, c = 3)
x
x <- unname(x)
x

# By assigning a character vector to names()
x <- 1:3
names(x) <- c("a", "b", "c")
x
names(x) <- NULL
x

# Inline, with setNames():
x <- setNames(1:3, c("a", "b", "c"))
x
```

在创建name属性时，应当保持name唯一且不为缺失值。需要注意这不是R的强制要求。

### Dimensions

atomic向量添加dim属性，就可以生成二维`matrix`或多维`array`。在R中可以使用`matrix()`,`array()`或`dim()`来生成。

```{r}
# Two scalar arguments specify row and column sizes
x <- matrix(1:6, nrow = 2, ncol = 3)
x


# One vector argument to describe all dimensions
y <- array(1:12, c(2, 3, 2))
y

# You can also modify an object in place by setting dim()
z <- 1:6
dim(z) <- c(3, 2)
z
```

atomic向量的许多函数都对matrix和array进行了推广。

|    **Vector**     |        **Matrix**         |    **Array**     |
|:-----------------:|:-------------------------:|:----------------:|
|     `names()`     | `rownames()`,`colnames()` |   `dimnames()`   |
|    `length()`     |     `nrow()`,`ncol()`     |     `dim()`      |
|       `c()`       |    `rbind()`,`cbind()`    | `abind::abind()` |
|        \-         |           `t()`           |    `aperm()`     |
| `is.null(dim(x))` |       `is.matrix()`       |   `is.array()`   |

不能简单地将没有维度的atomic向量视作只有1行或1列的矩阵、1维的数组，因为函数对它们的处理结果是不一样的。

```{r}
str(1:3) # 1d vector
str(matrix(1:3, ncol = 1)) # column vector
str(matrix(1:3, nrow = 1)) # row vector
str(array(1:3, 3)) # "array" vector
```

### Exercises

-   comment属性比较特殊，不会被`print`打印出来，只能使用`attr()`或`attributes()`来提取。

## S3 atomic vectors

`class`是另外一个重要的属性，它赋予了对象S3面向对象的能力。每个S3对象由base type构建（base type内容见12章）。本节主要讨论下面四种S3 atomic vectors：

-   `factor`：分类数据。
-   `Date`：日期数据。
-   `POSIXct`：日期时间数据。
-   `difftime`：持续时间数据。

```{mermaid}
graph BT
    B[Atomic] --> A(Vector)
    D[Logical] --> B(Atomic)
    C[Numeric] --> B(Atomic)
    E[Integer] --> C(Numeric)
    F[Double] --> C(Numeric)
    G[Character] --> B(Atomic)
    subgraph "base atomic"
        D
        E
        F
        G
    end
    H[factor] --> E
    I[POSIXct] --> F
    J[Date] --> F
    subgraph "S3 atomic"
        H
        I
        J
    end
```

### Factors

factor 是在integer类型向量基础上，添加`class = fcator`和`levels`两个属性构成。

```{r}
x <- factor(c("a", "b", "b", "a"))
x

typeof(x)
attributes(x)
```

![](images/factor.png)

factor 有一个变体——ordered factor，它的属性`levels`具有了顺次意义，例如：low,medium,high等。

```{r}
grade <- ordered(c("b", "b", "a", "c"), levels = c("c", "b", "a"))
grade
```

base R 中的函数如`read.csv()`,`data.frame()`会自动将字符串转换为factor，这种行为很没有道理，因为有时数据中不可能包含全部的level。可以通过`stringsAsFactors = FALSE`来禁用这种行为。

### Dates

Date 是在double类型向量基础上，添加`class = Date`属性构成。去除属性后，可以看到原来的double向量。

```{r}
today <- Sys.Date()

typeof(today)
attributes(today)

# 底层double向量，思考一下这个数字的含义？
unclass(today)
```

### Date-times

base R 提供了两种储存 date-time 的数据格式：`POSIXct`和`POSIXlt`。这里我们只关注`POSIXct`，因为它构建于double类型向上，且在数据框中广泛应用。`POSIXct`有两个属性：`class = POSIXct`和`tzone`。

```{r}
now_ct <- as.POSIXct("2018-08-01 22:00", tz = "UTC")
now_ct

typeof(now_ct)
attributes(now_ct)
```

`tzone`属性值控制date-time的显示形式，不改变其本质的double数值。

```{r}
new_ct <- structure(now_ct, tzone = "Asia/Tokyo")
new_ct
unclass(now_ct)
unclass(new_ct)
```

### Durations

durations 表示date或date-time之间的持续时间，它是在double类型向量基础上，添加`class = difftime`属性构成，同时有属性`units`，表示持续时间的单位。

```{r}
one_week_1 <- as.difftime(1, units = "weeks")
one_week_1

typeof(one_week_1)
#> [1] "double"
attributes(one_week_1)

one_week_2 <- as.difftime(7, units = "days")
one_week_2

typeof(one_week_2)
attributes(one_week_2)
```

### Exercises

-   仔细观察下面三个因子的不同。

```{r}
# 数据和level同时反转
f1 <- factor(letters)
f1
as.integer(f1)
levels(f1) <- rev(levels(f1))
f1
as.integer(f1)

# 仅数据反转
f2 <- rev(factor(letters))
f2
as.integer(f2)

# 仅level反转
f3 <- factor(letters, levels = rev(letters))
f3
as.integer(f3)
```

## Lists

虽然看起来`list`中的元素是不同，诚如前章所述，list中的元素有其自己的内存地址，也就是说，list中的元素本质是相同的，只是其索引的内容类型不同。

### Creating

使用函数`list()`创建list。

```{r}
l1 <- list(
  1:3,
  "a",
  c(TRUE, FALSE, TRUE),
  c(2.3, 5.9)
)

typeof(l1)

str(l1)
```

如上所述，list的元素只是索引，所以list的实际内存大小可能与你的期望相差甚远。

```{r}
lobstr::obj_size(mtcars)

l2 <- list(mtcars, mtcars, mtcars, mtcars)
lobstr::obj_size(l2)
```

list 中的元素可以是其他的list。

```{r}
l3 <- list(list(list(1)))
str(l3)
```

![](images/list-recursive.png)

前面讲到函数`c()`要求元素类型一致，否则执行强制转换；当list和其他atomic向量使用`c()`合并时，atomic向量会被强制添加到list中。

```{r}
l4 <- list(list(1, 2), c(3, 4))
l5 <- c(list(1, 2), c(3, 4))
str(l4)
str(l5)
```

![](images/list-c.png)

### Testing and coercion

-   使用`typeof()`查看是否为`list`。
-   使用`as.list()`强制转换为`list`。
-   使用`unlist()`强制转换为atomic向量。

```{r}
# 注意as.list的不同
l6 <- list(1:3)
l6

typeof(l6)

as.list(1:3)
```

### Matrices and arrays

atomic向量添加`dim`属性后创建出matrix，list添加`dim`属性后可以创建此出list-matrix、list-array。这些数据结构可以使得处理特殊数据时更加灵活。

```{r}
l <- list(1:3, "a", TRUE, 1.0)
dim(l) <- c(2, 2)
l

l[[1, 1]]
```

### Exercises

-   使用`[`函数提取元素时，当超出范围，atomic向量返回`NA`，list返回`NULL`。

```{r}
# Subsetting atomic vectors
(1:2)[3]
(1:2)[NA]

# Subsetting lists
as.list(1:2)[3]
as.list(1:2)[NA]
```

## Data frames and tibbles

最重要的两个以list为基础构建的S3 对象是：`data.frame`和`tibble`。

```{mermaid}
graph BT
    B[List] --> A(Vector)
    D[data.frame] --> B(List)
    C[tibble] --> B(List)
```

dataframe有三个属性`names`、`class = data.frame`、`row.names`。`names`是list本身的属性，表示为有name的list，在dataframe中表示列名；`row.names`表示行名。同时dataframe要求list中的每个元素长度都相等。作用于list的函数如`names()`，作用于dataframe时返回的是列名，等价于`colnames()`、`length()`返回的是列数，等价于`ncol()`。

```{r}
df1 <- data.frame(x = 1:3, y = letters[1:3])
typeof(df1)

attributes(df1)

names(df1)
length(df1)
```

tibble由R包tibble提供，是对dataframe的一种补充，二者由唯一的不同是属性`class`，tibble有其自己独特的类`tbl_df`,`tbl`。类的不同赋予了tibble格式在某些行为上与dataframe有着巨大的差别。下面会详细介绍二者的不同。

```{r}
library(tibble)

df2 <- tibble(x = 1:3, y = letters[1:3])
typeof(df2)

attributes(df2)
```

### Creating

在使用`data.frame()`和`tibble()`函数创建dataframe或tibble时，主要有下面四点不同：

-   列为字符串时，是否自动转换为因子：在R 4.0.0之前的版本，`data.frame()`函数默认`stringsAsFactors = TRUE`，而`tibble()`函数始终不会将字符串转换为因子。

```{r}
df1 <- data.frame(
  x = 1:3,
  y = c("a", "b", "c"),
  stringsAsFactors = FALSE
)
str(df1)

df2 <- tibble(
  x = 1:3,
  y = c("a", "b", "c")
)
str(df2)
```

-   列名不规范时，是否自动转换为合法列名：`data.frame()`在参数`check.names = FALSE`时不会转换列名，`tibble()`函数始终不会转换列名，而是使用“`”包裹列名。

```{r}
names(data.frame(`1` = 1))

names(tibble(`1` = 1))
```

-   在构建数据框时，如果列之间的长度不同：`data.frame()`函数会将较短的列自动循环，`tibble()`函数只会循环长度为1的列，否则报错。

```{r}
#| error: true
data.frame(x = 1:4, y = 1:2)
data.frame(x = 1:4, y = 1:3)

tibble(x = 1:4, y = 1)
tibble(x = 1:4, y = 1:2)
```

-   在构建数据框时，`tibble()`函数可以使用前面定义好的列的数据。

```{r}
tibble(
  x = 1:3,
  y = x * 2
)
```

### Row names

dataframe可以使用`data.frame(row.names = ...)`或`rownames(df) <- ...`来赋予数据框行名，但是tibble不支持设置行名（实际是可以设置的，只是不建议这样做）。

```{r}
df3 <- data.frame(
  age = c(35, 27, 18),
  hair = c("blond", "brown", "black"),
  row.names = c("Bob", "Susan", "Sam")
)
df3

rownames(df3)

df3["Bob", ]
```

对于tibble为什么不赞成为数据框设置行名，可以参考原文。dataframe转换为tibble时可以使用`rownames_to_column()`或`as_tibble(rownames = "rownames")`来保留行名信息。

### Printing

在终端以dataframe或tibble格式分别打印数据，会发现：dataframe将所有行列都打印了出来，而tibble只打印前几行及前几列，同时显示未打印列及行的信息，并且显示每列数据的类型，压缩内容过长的单元格，显示特殊数据比如`NA`。

```{r}
dplyr::starwars
```

### Subsetting

在第4章会学到更多有关提取子集的内容，这里介绍两个dataframe在提取子集时的两个缺点：

-   `df[, vars]`提取的列为1时，会自动降维成向量，除非添加参数`df[, vars, drop = FALSE]`。
-   `df$x`根据列名提取某列时，如果没有该列，会尝试返回一个字符串开头是`x`字符的列。

```{r}
df1 <- data.frame(xyz = "a")
df2 <- tibble(xyz = "a")

str(df1$x)
str(df2$x)
```

### Testing and coercing

`is.data.frame()`可以用来检查是否是dataframe或tibble，`is_tibble()`只能检查是否是tibble（注意两个函数在形式上的区别`.`,`_`）。

```{r}
is.data.frame(df1)
is.data.frame(df2)

is_tibble(df1)
is_tibble(df2)
```

### List columns

前面我们说过，数据框本质是一个list，所以数据框中的列可以包含任意类型的元素，包括list。tibble本身支持list column，dataframe需要额外的`I()`函数辅助。

```{r}
# tibble
tibble(
  x = 1:3,
  y = list(1:2, 1:3, 1:4)
)

# dataframe
df <- data.frame(x = 1:3)
df$y <- list(1:2, 1:3, 1:4)

data.frame(
  x = 1:3,
  y = I(list(1:2, 1:3, 1:4))
)
```

### Matrix and data frame columns

同上面的list一样，你可以在数据框中添加行数相等的矩阵和数据框。

![](images/data-frame-list.png)

```{r}
dfm <- data.frame(
  x = 1:3 * 10
)
dfm$y <- matrix(1:9, nrow = 3)
dfm$z <- data.frame(a = 3:1, b = letters[1:3], stringsAsFactors = FALSE)

str(dfm)
```

![](images/data-frame-matrix.png)

### Exercises

...

## NULL

NULL 的长度为0，类型为`NULL`，且无法拥有任何属性。

```{r}
#| error: true
typeof(NULL)

length(NULL)

x <- NULL
attr(x, "y") <- 1
```

