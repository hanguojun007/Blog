---
title: "11 Bidirectional Communication"
date: "2025-07-31"
date-modified: "2025-07-31"

format: "html"
fig-width: 6
fig-asp: 0.618
out-width: 70%
fig-align: center

knitr:
  opts_chunk:
    collapse: true
    comment: "#>"
    R.options:
      dplyr.print_min: 6
      dplyr.print_max: 6
      pillar.max_footer_lines: 2
      pillar.min_chars: 15
      stringr.view_n: 6
      cli.num_colors: 0
      cli.hyperlink: FALSE
      pillar.bold: TRUE
      width: 77

execute:
  warning: true
  error: true
---

shiny 是R语言的web开发框架。它不仅可以像JavaScript那样运行在浏览器中，也可以与R后端进行交互。接下来一些章节的主要目的就是揭示通信的机制。本章首先介绍JavaScript如何嵌入到shiny程序中。

## WebSocket an Shiny

shiny程序由两部分组成：前端UI和后端Server。二者通过**WebSocket**——持续传递信息的链接——进行沟通。在Server端，由“httpuv”包和“WebSocket”包管理链接；在前端，由JS进行管理。

![](image/Websocket.png)

基于此，我们可以创建一个简单的shiny程序：

```r
library(shiny)

ui <- fluidPage(
  textInput("nameInput", "Name:"),
  textOutput("nameOutput")
)

server <- function(input, output) {
  output$nameOutput <- renderText({
    paste("Hello", input$nameInput)
  })
}

shinyApp(ui, server)
```

上述shiny程序的UI与Server之间的逻辑关系图如下：

![](image/shinyWebSocket.png)

## Sessions

注意：shiny会将不同前端与Server之间的通信封装成一个session，每个session（用户）之间相互独立，互不影响。

另外关于WebSocket，它通常应用在群发消息。

## Alerts，an example

[jBox](https://github.com/StephanWagner/jBox)是一种展示弹窗的插件，可以很方便地实现alert效果。

我们将使用jBox库构建一个shiny程序——在单击`actionButton`时显示通知，并在关闭时 “告知” 服务器——以此解释WebSocket的双向通信。尽管本书介绍了如何包含JavaScript库依赖关系，但在本节 (且仅在本节) 中忽略。

### Explore

下面我们创建了一个jBox的基础应用Html网页，当网页被打开时，会展示一个通知框（本网页也是如此）。

```html
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
<script
  src="https://code.jquery.com/jquery-3.5.1.min.js">
  </script>
<script
  src="https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/
    dist/jBox.all.min.js">
</script>
<link
  href="https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/
    dist/jBox.all.min.css"
  rel="stylesheet">
</head>

<body>
  <!-- Script to show a notification -->
  <script>
    new jBox('Notice', {
      content: 'Hurray! A notice!'
    });
  </script>
</body>
</html>
```

```{=html}
<script src="src/jquery-3.5.1.min.js"></script>
<script src="src/jBox.all.min.js"></script>
<link href="css/jBox.all.min.css" rel="stylesheet">
<script>
  new jBox('Notice', {
    content: 'Hurray! A notice!'
  });
</script>
```

下面，我们使用shiny程序来复现上面的alert。由于jQuery已经包含在shiny中，因此，我们不需要再引入jQuery。

```r
library(shiny)

ui <- fluidPage(
  tags$head(
    tags$script(
      src = paste0(
        "https://cdn.jsdelivr.net/gh/StephanWagner/",
        "jBox@v1.2.0/dist/jBox.all.min.js"
      )
    ),
    tags$link(
      rel = "stylesheet",
      href = paste0(
        "https://cdn.jsdelivr.net/gh/StephanWagner/",
        "jBox@v1.2.0/dist/jBox.all.min.css"
      )
    )
  ),
  tags$script("
    new jBox('Notice', {
      content: 'Hurray! A notice!'
    });")
)

server <- function(input, output) {}

shinyApp(ui, server)
```

![](image/jbox-init.png)

### From R to JavaScript

