---
title: "07 The Full Monty"
date: "2025-06-12"
date-modified: "2025-06-14"
format: "html"
execute:
  warning: false
  fig-width: 6
  fig-asp: 0.618
  out-width: 70%
  fig-align: center
---

```{r}
#| echo: false

source("_common.R")
```

本章以[gio.js](https://giojs.org/)库为基础，学习输入数据的处理方式。gio.js用来在三维地球图上，通过曲线绘制国家之间的联系。下面是该库的一个简单示例：

```html
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">

<head>
  <!-- Import libraries -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/110/three.min.js"></script>
  <script src="https://raw.githubusercontent.com/syt123450/giojs/master/build/gio.min.js"></script>
</head>

<body>
  <!-- div to hold visualisation -->
  <div id="globe" style="width: 200px; height: 200px"></div>

  <!-- Script to create visualisation -->
  <script>
    // data is demo
    var data = [
    {
      "e": "CN",
      "i": "US",
      "v": 3300000
    },
    {
      "e": "CN",
      "i": "RU",
      "v": 10000
    }
    ]
    var container = document.getElementById("globe");
    var controller = new GIO.Controller(container);
    controller.addData(data);
    controller.init();
  </script>
</body>

</html>
```

```{=html}
<script src="./src/three.min.js"></script>
<script src="./src/gio.min.js"></script>
  <!-- div to hold visualisation -->
<div id="globe" style="width: 400px; height: 400px"></div>

<!-- Script to create visualisation -->
<script>
  var data = [
  {
    "e": "CN",
    "i": "US",
    "v": 3300000
  },
  {
    "e": "CN",
    "i": "RU",
    "v": 10000
  }
  ]
  var container = document.getElementById("globe");
  var controller = new GIO.Controller(container);
  controller.addData(data);
  controller.init();
</script>
```

## Creating Package
同上一章一样：

-   首先创建`gio`R包及scaffold：

```r
usethis::create_package("gio")
htmlwidgets::scaffoldWidget("gio")
```

-   然后下载依赖JS库，修改`inst/htmlwidgets/gio.yaml`文件

```r
# create directories for JS dependencies
dir.create("./inst/htmlwidgets/three", recursive = TRUE)
dir.create("./inst/htmlwidgets/gio", recursive = TRUE)

# download JS dependencies
three <- paste0(
  "https://cdnjs.cloudflare.com/ajax/",
  "libs/three.js/110/three.min.js"
)
gio <- paste0(
  "https://raw.githubusercontent.com/",
  "syt123450/giojs/master/build/gio.min.js"
)

download.file(three, "./inst/htmlwidgets/three/three.min.js")
download.file(gio, "./inst/htmlwidgets/gio/gio.min.js")
```

```yaml
dependencies:
  - name: three
    version: 110
    src: htmlwidgets/three
    script: three.min.js
  - name: gio
    version: 2.0
    src: htmlwidgets/gio
    script: gio.min.js
```

-   修改`int/htmlwidgets/gio.js`文件中的函数：因为gio.js直接使用widget创建的el对象，所以我们无需使用`var container = document.getElementById("globe")`来获取el对象，而是直接使用`el`对象；同时需要的数据由x对象传入。

```javascript
// gio.js
HTMLWidgets.widget({

  name: 'gio',

  type: 'output',

  factory: function(el, width, height) {

    // TODO: define shared variables for this instance

    return {

      renderValue: function(x) {

        // var container = document.getElementById("globe");
        var controller = new GIO.Controller(el);
        controller.addData(x.data);
        controller.init();

      },

      resize: function(width, height) {

        // TODO: code to re-render the widget with a new size

      }

    };
  }
});
```

-   最后修改`R/gio.R`文件：上面的js需要输入对象x要有`data`属性，所以这里需要修改`gio`函数的参数和`x`的数据结构。

```r
# 注意：将message修改为data
gio <- function(data, width = NULL, height = NULL, elementId = NULL) {

  # forward options using x
  x = list(
    data = data
  )

  # create widget
  htmlwidgets::createWidget(
    name = 'gio',
    x,
    width = width,
    height = height,
    package = 'gio',
    elementId = elementId
  )
}
```

-   最后运行`devtools::document();devtools::load_all()`加载函数，使用`gio(data)`创建widget。

## Working with Data

现在只需要我们创建gio.js需要的json数据，即可创建gio.js的widget。阅读jio.js的[文档](https://giojs.org/html/docs/dataAdd.html)，其要求的数据结构为：e——exporting country, i——importing country, v——value。

```json
[
  {
    "e": "CN",
    "i": "US",
    "v": 3300000
  },
  {
    "e": "CN",
    "i": "RU",
    "v": 10000
  }
]
```

我们使用R读取该JSON数据，会发现数据结构转为data.frame。

```{r}
# data.frame to test
arcs <- jsonlite::fromJSON(
  '[
    {
      "e": "CN",
      "i": "US",
      "v": 3300000
    },
    {
      "e": "CN",
      "i": "RU",
      "v": 10000
    }
  ]'
)

print(arcs)
```

当我们直接将`arcs`传入`gio`函数时，会发现只有一个空白的widget。使用`console.log`或查看HTML源码，会发现传入的数据结构和预期的不符。

```json
{
  "x":{
    "data":{
      "e":["CN","CN"],
      "i":["US","RU"],
      "v":[3300000,10000]
    }
  },
  "evals":[],
  "jsHooks":[]
}
```

![](image/gio-1.png)

出现上述情况的原因是：row-wise的JSON被`jsonlite::fromJSON`自动转换为了dataframe，而`htmlwidgets`的`createWidget`函数会自动将dataframe转为column-wise的JSON，从而导致数据结构不符。

```{r}
# column-wise
jsonlite::toJSON(arcs, dataframe = "columns")
# row-wise
jsonlite::toJSON(arcs, dataframe = "rows")
```

## Transforming Data

下面介绍一些确保dataframe被row-wise的方法。

### Using JavaScript

htmlwidgets JavaScript 库提供了`dataframeToD3`函数，将column-wise的JSON转为row-wise的JSON。

```javascript
// gio.js
renderValue: function(x) {

  // long to wide
  x.data = HTMLWidgets.dataframeToD3(x.data);

  var controller = new GIO.Controller(el);
  controller.addData(x.data);
  controller.init();

}
```

### Modify Serialiser

正如前面讲到的那样，我们可以设置`htmlwidgets`的`createWidget`函数自动将dataframe转为row-wise的JSON。

下面是`createWidget`函数的底层逻辑，可以看到只要修改`dataframe`参数为`"rows"`即可。

```r
function (x, ..., dataframe = "columns", null = "null",
na = "null", auto_unbox = TRUE, use_signif = TRUE,
  digits = getOption("shiny.json.digits", 16), force = TRUE,
  POSIXt = "ISO8601", UTC = TRUE, rownames = FALSE,
  keep_vec_names = TRUE, strict_atomic = TRUE)
{
  if (strict_atomic)
      x <- I(x)
  jsonlite::toJSON(x, dataframe = dataframe, null = null, na = na,
    auto_unbox = auto_unbox, digits = digits, force = force,
    use_signif = use_signif, POSIXt = POSIXt, UTC = UTC,
    rownames = rownames, keep_vec_names = keep_vec_names,
    json_verbatim = TRUE, ...)
}
```

htmlwidgets巧妙地利用了属性，可以将`rows`设置为`x`对象的`TOJSON_ARGS`属性，从而实现row-wise处理。

```r
gio <- function(data, width = NULL, height = NULL,
  elementId = NULL) {

  # forward options using x
  x = list(
    data = data
  )

  # serialise data.frames to wide (not long as default)
  attr(x, 'TOJSON_ARGS') <- list(dataframe = "rows")

  # create widget
  htmlwidgets::createWidget(
    name = 'gio',
    x,
    width = width,
    height = height,
    package = 'gio',
    elementId = elementId
  )
}
```

### Replace Serialiser

也可以为`x`对象添加`TOJSON_FUNC`属性值，直接替换serialiser函数。

```r
gio <- function(data, width = NULL, height = NULL,
  elementId = NULL) {

  # forward options using x
  x = list(
    data = data
  )

  # replace serialiser
  attr(x, 'TOJSON_FUNC') <- gio_serialiser

  # create widget
  htmlwidgets::createWidget(
    name = 'gio',
    x,
    width = width,
    height = height,
    package = 'gio',
    elementId = elementId
  )
}

# serialiser
gio_serialiser <- function(x){
  jsonify::to_json(x, unbox = TRUE)
}
```

### Modify the Data

我们也可以直接修改`data`数据类型。

```r
x = list(
  data = apply(data, 1, as.list)
)
```

### Pros and Cons

上述每种方法都有其优缺点。最好的方法可能是仅在需要的地方修改默认序列化器（Modify Serialiser），这是本书其余部分使用的方法。完全替换序列化器（Replace Serialiser）应该是不必要的，只有在你非常熟悉序列化并真正看到需要它时才这样做。此外，HTMLWidgets 的序列化器扩展了 jsonlite, 允许转换 JavaScript 代码，这将在后面派上用场。在 JavaScript 中转换 data （Using JavaScript）有一个缺点，HTMLWidgets.dataframeToD3 不能应用于整个 x 对象，它只会作用于包含column-wise data (x.data) 的子集，这往往会导致代码笨拙，因为在不同地方使用该函数。

## On Print Method

gio.js提供了一些[themes](https://giojs.org/html/docs/colorStyle.html)，我们可以为其`x`对象添加style`属性。

```javascript
// gio.js
renderValue: function(x) {

  var controller = new GIO.Controller(el);
  controller.addData(x.data);

  controller.setStyle(x.style); // set style

  controller.init();

}
```

此时，我们除了前面讲到的修改`R/gio.R`文件中函数的`data`对象，还可以直接为`x`对象添加style。使用`print()`我们可以清楚地看到数据结构。

```{r}
#| echo: false
devtools::load_all("/root/UbuntuData/gio")
```

```{r}
g <- gio(arcs) # nothing renders
g # visualisation renders
```

```{r}
print(g$x)
```

在`R/gio.R`文件中，创建添加属性的函数：

```r
#' @export
gio_style <- function(g, style = "magic"){
  g$x$style <- style
  return(g)
}
```

```r
g1 <- gio(arcs)
g2 <- gio_style(g1, "juicyCake")

g2
```

htmlwidgets系列包也可以被magrittr包支持，使用`usethis::use_pipe()`可以方便的实现管道符操作。

```{r}
library(magrittr)

gio(arcs) %>%
  gio_style("juicyCake")
```
