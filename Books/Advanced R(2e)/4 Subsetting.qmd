---
title: "4 Subsetting"
date: "2025-04-05"
date-modified: "2025-04-05"
format: "html"
execute:
  warning: false
  fig-width: 6
  fig-asp: 0.618
  out-width: 70%
  fig-align: center
---

```{r}
#| echo: false

source("_common.R")
```

## Introduction

R 中的提取子集操作上手很快，使用起来也很方便。但是想要掌握，需要理解并整合下面几点内容：

-   有6种方法提取atomic向量的子集。
-   有3种提取函数：`[`、`[[`和`$`。
-   提取不同类型的对象，提取函数有不同的表现。
-   提取函数可以搭配`<-`来赋值。

::: callout-note
`[`、`[[`和`$` 本质上是S3面向对象类型的函数
:::

### Outline

-   4.2节：介绍`[`函数，及其在不同类型对象上的用法。
-   4.3节：介绍`[[`和`$`函数，及其在不同类型对象上的用法。
-   4.4节：介绍提取函数与`<-`的搭配使用。
-   4.5节：介绍8个实践案例。

## Selecting multiple elements

### Atomic vectors

以提取atomic向量为例，介绍用作提取子集时的6种坐标：

```{r}
x <- c(2.1, 4.2, 3.3, 5.4)
```

-   正整数：表示元素在向量中的位置。

```{r}
x[c(3, 1)]
x[order(x)]

# Duplicate indices will duplicate values
x[c(1, 1)]

# Real numbers are silently truncated to integers
x[c(2.1, 2.9)]
```

-   负整数：负号表示删除，正负不能同时存在。

```{r}
#| error: true
x[-c(3, 1)]


x[c(-1, 2)]
```

-   逻辑值：`TRUE`表示保留，`FALSE`表示删除，`NA`返回`NA`。在`x[y]`的模式中，如果二者长度不等，会发生循环，遵循R base中的循环原则：循环短的一方。

```{r}
x[c(TRUE, TRUE, FALSE, FALSE)]
x[x > 3]
x[c(TRUE, NA, FALSE, TRUE)]
```

-   Nothing：返回完整的对象，在后面对`data.frame`提取时有用。

```{r}
x[]
```

-   Zero：返回长度为0的向量。

```{r}
x[0]
```

-   字符串：有`name`属性的向量元素。

```{r}
(y <- setNames(x, letters[1:4]))
y[c("d", "c", "a")]

# Like integer indices, you can repeat indices
y[c("a", "a", "a")]

# When subsetting with [, names are always matched exactly
z <- c(abc = 1, def = 2)
z[c("a", "d")]
```

::: callout-note
不要使用因子化的字符串向量提取子集，字符串向量因子化后，会视为整数。

```{r}
y[factor("b")]
```
:::

### Lists

`[`函数作用于list时，返回得仍然是一个list；`[[`和`$`函数作用于list时，返回得是list中的元素。

### Matrices and arrays

对于多维的atomic Vector，只需要在每个维度上应用上述6种坐标，就可以得到子集。

```{r}
a <- matrix(1:9, nrow = 3)
colnames(a) <- c("A", "B", "C")
a[1:2, ]
a[c(TRUE, FALSE, TRUE), c("B", "A")]
a[0, -2]
```

因为Matrices和Arrays是带有特殊属性的向量，所以仍然可以只使用一维的向量来提取，但要注意：它们都是列向量。

```{r}
vals <- outer(1:5, 1:5, FUN = "paste", sep = ",")
vals

vals[c(4, 15)]
```

可以使用一个两列matrix提取2维Matrices，三列matrix提取3维Arrays；一行表示一个坐标，返回一个向量。

```{r}
select <- matrix(ncol = 2, byrow = TRUE, c(
  1, 1,
  3, 1,
  2, 4
))
select
vals[select]
```

### Data frames and tibbles

Data.frame具有list和matrix的特性：

-   当只提供一个index时，会将其视作list，返回列。
-   当提供两个index时，将其视作matrix，返回矩阵。

```{r}
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])

df[df$x == 2, ]
df[c(1, 3), ]

# There are two ways to select columns from a data frame
# Like a list
df[c("x", "z")]

# Like a matrix
df[, c("x", "z")]


# There's an important difference if you select a single
# column: matrix subsetting simplifies by default, list
# subsetting does not.
str(df["x"])
str(df[, "x"])
```

对tibble使用`[`，始终返回tibble。

```{r}
tib <- tibble::tibble(x = 1:3, y = 3:1, z = letters[1:3])

str(tib["x"])
str(tib[, "x"])
```

### Preserving dimensionality

`[`函数有额外的参数`drop`用于控制是否在只有一列时降维，默认为`TRUE`。

正如上面例子中的结果一样，data.frame在列方向上的index长度为1时，会发生降维：`df["x"]`没有发生降维，`df[, "x"]`则发生了降维。

```{r}
str(df[, "x", drop = FALSE])
```

matrix则表现为任意维度的index长度为1时，都会发生降维：

```{r}
a <- matrix(1:4, nrow = 2)
str(a[1, ])

str(a[1, , drop = FALSE])
```

在factor中使用`[`时，也有参数`drop`；但该参数的意义为：是否丢弃没有值的级别，默认为`FALSE`。

```{r}
z <- factor(c("a", "b"))
z[1]
z[1, drop = TRUE]
```

### Exercises

...

## Selecting a single element

### `[[`

`[[`函数广泛应用在list或dataframe对象上，它与`[`函数的不同在于，返回得是降维的子对象。将一个list比作一列火车，`[[`返回的是火车中某车厢上的所有元素，`[`返回的是带有选取车厢的整列火车。

```{r}
x <- list(1:3, "a", 4:6)
```

![](images/train.png)

![](images/train-single.png)

![](images/train-multiple.png)

使用`[[`函数时要注意：

1.  只能提供长度为1的整数或字符串作为index。
2.  当提供的长度大于1后，会递归地提取子对象。

```{r}
x1 <- list(
  1:3,
  list( "a", "b"),
  4:6
)

x1[[c(2,1)]]
# 等价于
x1[[2]][[1]]
```

### `$`

`x$y`大致等于`x[["y", exact = FALSE]]`。

在使用`$`时，常见的错误是：使用当前环境变量中的某些变量来替代数据框或list中的name，此时推荐使用`[[`。

```{r}
var <- "cyl"
# Doesn't work - mtcars$var translated to mtcars[["var"]]
mtcars$var

# Instead use [[
mtcars[[var]]
```

`$`与`[[`最大的不同是，`$`会自动地执行从左到右地部分匹配；可以添加`options(warnPartialMatchDollar = TRUE)`来添加提醒。

```{r}
x <- list(abc = 1)
x$a
x[["a"]]
```

```{r}
#| warning: true
options(warnPartialMatchDollar = TRUE)
x$a
```

### Missing and out-of-bounds indices

在使用`[[`函数时，如果index无效，不同类型对象的结果不同。如下表中总结，三种类型的数据：atomic向量，list和NULL，四种无效的index：长度为0，超出范围（整数、字符串），缺失。

| **row\[\[col\]\]** | **Zero-length** | **Out of bounds(Integer)** | **Out of bounds(character)** | **Missing** |
|:-------------:|:-------------:|:-------------:|:-------------:|:-------------:|
| Atomic | Error | Error | Error | Error |
| List | Error | Error | NULL | NULL |
| NULL | NULL | NULL | NULL | NULL |

```{r}
#| eval: false
x <- setNames(1:3, letters[1:3])
y <- list(A = 1:3, B = 4:6, C = 7:9)
z <- NULL

x[[NULL]]
x[[4]]
x[["d"]]
x[[NA]]

y[[NULL]]
y[[4]]
y[["D"]]
y[[NA]]

z[[NULL]]
z[[4]]
z[["D"]]
z[[NA]]
```

从表中可以看出，`[[`的结果存在非一致性。`purrr`包提供了另外两种取子集的函数`purrr::pluck()`,`purrr::chuck()`。`purrr::pluck()`可以设置元素缺失时的默认返回值（默认为`NULL`），`purrr::chuck()`总是返回错误。`pluck()`也允许混合整数和字符串的index。`pluck()`的优点，使得其在处理结构化数据`json`或web api结果时非常有用。

```{r}
x <- list(
  a = list(1, 2, 3),
  b = list(3, 4, 5)
)

purrr::pluck(x, "a", 1)

purrr::pluck(x, "c", 1)

purrr::pluck(x, "c", 1, .default = NA)
```

### `@` and `slot()`

`@`和`slot()`设计到S4面向对象系统，我们将在后面的章节中学习。

### Exercises

...

## Subsetting and assignment

查看函数说明文档，如果包含`FUN(x) <- `形式的函数，就支持赋值。

```{r}
x <- 1:5
x[c(1, 2)] <- c(101, 102)
x
```

在使用赋值前，一定要检查好提取的子集长度等于赋的值长度、子集index唯一。因为base R的循环原则，会使得结果完全不符合预期。

对于list，可以使用`x[[i]] <- NULL`删除某个元素，如果是增加一个内容为`NULL`的元素可以使用`x[i] <- list(NULL)`。

```{r}
x <- list(a = 1, b = 2)
x[["b"]] <- NULL
str(x)

y <- list(a = 1, b = 2)
y["b"] <- list(NULL)
str(y)
```

前面讲到，提取空元素对atomic向量没有太多用处，但对数据框有重要作用：它可以保持数据框的数据结构：

```{r}
mtcars[] <- lapply(mtcars, as.integer)
is.data.frame(mtcars)

mtcars <- lapply(mtcars, as.integer)
is.data.frame(mtcars)
```

## Applications

利用取子集的功能，你可以对数据框进行查找、拼接、排序、抽样、解压、删除等操作，下面是一些应用广泛的例子：

### Lookup tables (character subsetting)

创建查询表格，进行数据转换。

```{r}
x <- c("m", "f", "u", "f", "f", "m", "m")
lookup <- c(m = "Male", f = "Female", u = NA)
lookup[x]

# 去除name
unname(lookup[x])
```

### Matching and merging by hand (integer subsetting)

使用`match()`函数与整数索引进行数据匹配和合并。

```{r}
grades <- c(1, 2, 2, 3, 1)

info <- data.frame(
  grade = 3:1,
  desc = c("Excellent", "Good", "Poor"),
  fail = c(F, F, T)
)

id <- match(grades, info$grade)
id
info[id, ]
```

### Random samples and bootstraps (integer subsetting)

同上，使用整数索引，搭配`sample()`函数，模拟抽样与bootstrap。

```{r}
df <- data.frame(x = c(1, 2, 3, 1, 2), y = 5:1, z = letters[1:5])

# Randomly reorder
df[sample(nrow(df)), ]

# Select 3 random rows
df[sample(nrow(df), 3), ]

# Select 6 bootstrap replicates
df[sample(nrow(df), 6, replace = TRUE), ]
```

### Ordering (integer subsetting)

同上，使用整数索引，搭配`order()`函数，对数据框排序。

```{r}
# Randomly reorder df
df2 <- df[sample(nrow(df)), 3:1]
df2

df2[order(df2$x), ]
df2[, order(names(df2))]
```

### Expanding aggregated counts (integer subsetting)

使用函数`rep()`，将行相同且具有重复数的数据框解压。

```{r}
df <- data.frame(x = c(2, 4, 1), y = c(9, 11, 6), n = c(3, 5, 1))
rep(1:nrow(df), df$n)

df[rep(1:nrow(df), df$n), ]
```

### Removing columns from data frames (character)

删除数据框的某列。

```{r}
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df$z <- NULL
```

```{r}
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df[c("x", "y")]

df[setdiff(names(df), "z")]
```

### Selecting rows based on a condition (logical subsetting)

使用逻辑向量筛选数据框的行。

```{r}
data(mtcars)
mtcars[mtcars$gear == 5, ]

mtcars[mtcars$gear == 5 & mtcars$cyl == 4, ]
```

### Boolean algebra versus sets (logical and integer )

`which()`函数可以将布尔索引转换为整数索引。但`x[which(y)]`与`x[y]`仍然有一些差别：

-   当布尔索引中存在缺失值`NA`时，对应得返回值也是`NA`。而`which()`会自动丢掉`NA`。

-   `x[-which(y)]`与`x[!y]`不是等价的：如有`y`全部是`FALSE`，`which(y)`返回`integer(0)`，而`-integer(0)`仍然是`integer(0)`，最终前者返回一个空的向量，后者返回全部值。

```{r}
x <- c(1, 2, 3, 4, NA, 5)

x[which(x > 2)]
x[x > 2]

x[-which(x > 10)]
x[!x > 10]
```

布尔向量的运算可以使用`intersect()`，``union()`，`setdiff()`等函数进行等价替换。

```{r}
(x1 <- 1:10 %% 2 == 0)
(x2 <- which(x1))
(y1 <- 1:10 %% 5 == 0)
(y2 <- which(y1))

# X & Y <-> intersect(x, y)
x1 & y1
intersect(x2, y2)

# X | Y <-> union(x, y)
x1 | y1
union(x2, y2)

# X & !Y <-> setdiff(x, y)
x1 & !y1
setdiff(x2, y2)

# xor(X, Y) <-> setdiff(union(x, y), intersect(x, y))
xor(x1, y1)
setdiff(union(x2, y2), intersect(x2, y2))
```
