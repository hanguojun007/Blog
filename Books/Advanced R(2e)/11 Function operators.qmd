---
title: "11 Function operators"
date: "2025-07-25"
date-modified: "2025-07-26"

format: "html"
fig-width: 6
fig-asp: 0.618
out-width: 70%
fig-align: center

knitr:
  opts_chunk:
    collapse: true
    comment: "#>"
    R.options:
      dplyr.print_min: 6
      dplyr.print_max: 6
      pillar.max_footer_lines: 2
      pillar.min_chars: 15
      stringr.view_n: 6
      cli.num_colors: 0
      cli.hyperlink: FALSE
      pillar.bold: TRUE
      width: 77

execute:
  warning: true
  error: true
---

## Introduction

**function operators** 本质也是一个**function factories**，只是规定输入是一个函数。下面的简单示例——`chatty()`函数，接受一个函数`f`，返回一个能打印`f`的输入的函数。

```{r}
chatty <- function(f) {
  force(f)

  function(x, ...) {
    message("Processing ", x)
    f(x, ...)
  }
}
f <- function(x) x^2
s <- c(3, 2, 1)

purrr::map_dbl(s, chatty(f))
```

**function operators** 与 python 中的装饰器相同，遵循开放封闭原则，即对扩展开放，对修改封闭。它允许我们在不修改原有函数代码的情况下增加额外的功能，例如：为函数添加日志、权限检查、参数检查等多种功能，这使得代码更加模块化，易于维护和扩展。

### Outline

-   11.2节介绍一些极其有用的 **function operators** 函数。

-   11.2节介绍如何根据实际问题，创建自己的 **function operators** 函数。

### Prerequisites

**function operators** 本质是**function factories**，请先了解 **function factory** 函数。

本章会用到purrr包中的泛函和其提供的**function operators**函数，及 memoise 包中的`memoise()`函数。

```{r}
library(purrr)
library(memoise)
```

## Existing function operators

### Capturing errors with `purrr::safely()`

在使用`map()`等函数替代for-loop时，我们通常会困扰于：如果函数执行过程中发生错误，那么`map()`函数会直接停止，不会返回已运行成功的部分结果，而for-loop则会保留部分结果。

```{r}
x <- list(
  c(0.512, 0.165, 0.717),
  c(0.064, 0.781, 0.427),
  "oops",
  c(0.890, 0.785, 0.495)
)

out <- rep(NA_real_, length(x))
for (i in seq_along(x)) {
  out[[i]] <- sum(x[[i]])
}

out

map_dbl(x, sum)
```

上面的例子中，虽然最后会失败，但`out`会保留前面成功的结果，但`map_dbl()`则不会。如果我们使用`safely()`修改`sum()`，就会始终返回一个同时包含正确结果和错误信息的list。仔细观察结果，会进一步发现：for-loop在第三个循环失败后不再允许，map则会继续执行，它返回了第四个结果。

```{r}
out <- map(x, safely(sum))
str(out)
```

那么，`safely()`函数做了什么？打印`safe_sum()`，我们会发现它调用了`capture_error()`函数，捕获错误信息并返回。

```{r}
safe_sum <- safely(sum)
safe_sum

str(safe_sum(x[[1]]))
str(safe_sum(x[[3]]))
```

由于`safely()`后的函数始终返回一个list——包含两个元素：result，error，我们可以使用`purrr::transpose()`函数，将`map()`的输出结果转置，得到一个包含两个元素的list，第一个元素是正常结果，第二个元素是错误信息。

```{r}
out <- transpose(map(x, safely(sum)))
str(out)
```

现在我们可以轻易地找到结果和错误原因。

```{r}
ok <- map_lgl(out$error, is.null)
ok

x[!ok]

out$result[ok]
```

`safely()`函数的使用场景有很多，我们可以总结出下面的使用规律：

```r
f <- fcuntion (x, ...) {
  # do something
}

out <- transpose(map(x, safely(f)))
ok <- map_lgl(out$error, is.null)

# which data failed to converge?
x[!ok]

# which models were successful?
out$result[ok]
```

### Other **function operators** in purrr

-   `possibly()`：当函数报错时，返回默认值，无法判断是否发生了错误。

-   `quietly()`：返回函数中除报错的其他信息。

```{r}
f <- function() {
  print("Hi!")
  message("Hello")
  warning("How are ya?")
  "Gidday"
}
f()

f_quiet <- quietly(f)
str(f_quiet())
```

-   `as_browse()`：当函数报错时，进入断点调试模式。

### Caching computations with `memoise::memoise()`

**memoises** 使函数可以缓存之前的输入和输出。这种缓存能力势必会增加内存的消耗，但却会提高计算的速度。

```{r}
slow_function <- function(x) {
  Sys.sleep(1)
  x * 10 * runif(1)
}
system.time(print(slow_function(1)))

system.time(print(slow_function(1)))
```

上面的例子中，每次运行结果都会不同，但是当被**memoises**后，第一次的结果就会被缓存，当输入相同时，就会直接返回缓存的结果。

```{r}
fast_function <- memoise::memoise(slow_function)
system.time(print(fast_function(1)))

system.time(print(fast_function(1)))
```

另外一个例子是计算斐波那契数列（f(0) = 0, f(1) = 1, f(n) = f(n-1) + f(n-2)）。

```{r}
fib <- function(n) {
  if (n < 2) {
    return(n)
  }
  fib(n - 2) + fib(n - 1)
}
system.time(fib(23))
system.time(fib(24))
```

将`fib()`**memoises**化后， 当计算完`fib2(23)`后，`fib2(24)`的计算速度会非常快。

```{r}
fib2 <- memoise::memoise(function(n) {
  if (n < 2) {
    return(n)
  }
  fib2(n - 2) + fib2(n - 1)
})
system.time(fib2(23))
system.time(fib2(24))
```

在动态规划中（**dynamic programming**），**memoises**更加常见。

但在**memoises**化函数之前，要检查函数是否是**pure**的。

## Case study: Creating your own function operators

下面我们以一个下载数据的例子，介绍如何编写自己的**function operator**。

假设你有很多书籍的网址，你想要下载这些书籍。使用前面章节中的`walk2()`和`file.download()`，可以简单地写为：

```r
urls <- c(
  "adv-r" = "https://adv-r.hadley.nz",
  "r4ds" = "http://r4ds.had.co.nz/"
  # and many many more
)
path <- paste0(tempdir(), names(urls), ".html")

walk2(urls, path, download.file, quiet = TRUE)
```

上面的方法在`urls`不是很长时，确实足够。但当`urls`变得很长时，你就需要考虑：

-   每本书下载后要添加一个延时，避免阻塞服务器。

-   显示下载的进度。

使用for-loop可以轻松解决上面两点，但for-loop将“下载”、“延时”，“显示进度”三个不同目的的东西都放在了一起，会让代码难于阅读。

```r
for (i in seq_along(urls)) {
  Sys.sleep(0.1)
  if (i %% 10 == 0) cat(".")
  download.file(urls[[i]], path[[i]], quiet = TRUE)
}
```

我们使用**function operators**来将这三个目的分开。首先创建“延时”函数`delay_by()`：接受两个参数——函数，延时时长

```{r}
delay_by <- function(f, amount) {
  force(f)
  force(amount)

  function(...) {
    Sys.sleep(amount)
    f(...)
  }
}
system.time(runif(100))
system.time(delay_by(runif, 0.1)(100))
```

将`delay_by()`应用到`download.file()`中：

```r
walk2(urls, path, delay_by(download.file, 0.1), quiet = TRUE)
```

接下来创建“显示进度”函数`dot_every()`：接受两个参数——函数，显示点的间隔

```{r}
dot_every <- function(f, n) {
  force(f)
  force(n)

  i <- 0
  function(...) {
    i <<- i + 1
    if (i %% n == 0) cat(".")
    f(...)
  }
}
walk(1:100, runif)
walk(1:100, dot_every(runif, 10))
```

将`dot_every()`应用到`download.file()`中：

```r
walk2(
  urls, path,
  dot_every(delay_by(download.file, 0.1), 10),
  quiet = TRUE
)
```

我们也可以使用管道符`%>%`将函数串起来写：

```r
walk2(
  urls, path,
  download.file %>% delay_by(0.1) %>% dot_every(10),
  quiet = TRUE
)
```
